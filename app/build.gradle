apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "com.zhulin.comassistant"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.gitVersionCode
        versionName rootProject.gitCurrentTag
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters 'armeabi-v7a' , 'armeabi' , 'x86'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }

    signingConfigs {
        def keystorePropertiesFile = rootProject.file(BUILD_PATH)
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        debug {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
        release {
            storeFile file(keystoreProperties['storeFileDebug'])
            storePassword keystoreProperties['storePasswordDebug']
            keyAlias keystoreProperties['keyAliasDebug']
            keyPassword keystoreProperties['keyPasswordDebug']
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled false
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "ZLComAssistant_${buildType.name}_${defaultConfig.versionName}.apk"
        }
    }

    sourceSets.main {
        jniLibs.srcDir 'libs'
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    def Dependencies = rootProject.ext.Dependencies
    def TestDependencies = rootProject.ext.TestDependencies
    def AndroidTestDependencies = rootProject.ext.AndroidTestDependencies
    def DevelopmentDependencies = rootProject.ext.DevelopmentDependencies
    implementation Dependencies.appcompat
    implementation Dependencies.supportv4
    implementation Dependencies.supportfragment
    implementation Dependencies.okhttp
    testImplementation TestDependencies.junit
    implementation project(':SuriotRK3288')
}
